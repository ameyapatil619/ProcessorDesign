////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : dec_regread.vf
// /___/   /\     Timestamp : 01/13/2017 13:11:11
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family artix7 -verilog /home/ameyapatil/Desktop/Projects_2017/ProcessorDesign/PipelineMIPS/dec_regread.vf -w /home/ameyapatil/Desktop/Projects_2017/ProcessorDesign/PipelineMIPS/dec_regread.sch
//Design Name: dec_regread
//Device: artix7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module dec_regread(clk, 
                   instr, 
                   pcplus4, 
                   rd_addr_wb, 
                   regwriteback, 
                   wdata, 
                   addi, 
                   ALUSrc, 
                   becheck, 
                   branch, 
                   dmem_read, 
                   dmem_write, 
                   fnct, 
                   jmp, 
                   opA, 
                   opB, 
                   ori, 
                   pc_branch_jmp, 
                   rd_addr, 
                   regdest, 
                   regwrite, 
                   rs_addr, 
                   rt_addr, 
                   signimm, 
                   wback_mux);

    input clk;
    input [31:0] instr;
    input [31:0] pcplus4;
    input [4:0] rd_addr_wb;
    input regwriteback;
    input [31:0] wdata;
   output addi;
   output ALUSrc;
   output becheck;
   output branch;
   output dmem_read;
   output dmem_write;
   output [5:0] fnct;
   output jmp;
   output [31:0] opA;
   output [31:0] opB;
   output ori;
   output [31:0] pc_branch_jmp;
   output [4:0] rd_addr;
   output regdest;
   output regwrite;
   output [4:0] rs_addr;
   output [4:0] rt_addr;
   output [31:0] signimm;
   output wback_mux;
   
   wire [5:0] XLXN_4;
   wire [25:0] XLXN_34;
   wire [15:0] XLXN_45;
   wire [31:0] opA_DUMMY;
   wire [31:0] opB_DUMMY;
   wire jmp_DUMMY;
   wire [4:0] rs_addr_DUMMY;
   wire [31:0] signimm_DUMMY;
   wire branch_DUMMY;
   wire [4:0] rt_addr_DUMMY;
   
   assign branch = branch_DUMMY;
   assign jmp = jmp_DUMMY;
   assign opA[31:0] = opA_DUMMY[31:0];
   assign opB[31:0] = opB_DUMMY[31:0];
   assign rs_addr[4:0] = rs_addr_DUMMY[4:0];
   assign rt_addr[4:0] = rt_addr_DUMMY[4:0];
   assign signimm[31:0] = signimm_DUMMY[31:0];
   branch_jump_check  branch_jump (.addr_j(XLXN_34[25:0]), 
                                  .branch(branch_DUMMY), 
                                  .imm(signimm_DUMMY[31:0]), 
                                  .jmp(jmp_DUMMY), 
                                  .pcplus4(pcplus4[31:0]), 
                                  .rdata1(opA_DUMMY[31:0]), 
                                  .rdata2(opB_DUMMY[31:0]), 
                                  .brnchcheck(becheck), 
                                  .pc(pc_branch_jmp[31:0]));
   controller  controller_dec (.opcode(XLXN_4[5:0]), 
                              .ALUSrc(ALUSrc), 
                              .branch(branch_DUMMY), 
                              .imm_add(addi), 
                              .imm_or(ori), 
                              .jmp(jmp_DUMMY), 
                              .mem_read(dmem_read), 
                              .mem_write(dmem_write), 
                              .regdest(regdest), 
                              .regwrite(regwrite), 
                              .wback(wback_mux));
   instr_brkup  instr_brkup_dec (.instr(instr[31:0]), 
                                .addr_j(XLXN_34[25:0]), 
                                .fnct(fnct[5:0]), 
                                .imm(XLXN_45[15:0]), 
                                .opcode(XLXN_4[5:0]), 
                                .rd_addr(rd_addr[4:0]), 
                                .rs_addr(rs_addr_DUMMY[4:0]), 
                                .rt_addr(rt_addr_DUMMY[4:0]), 
                                .shamnt());
   regfile  regfile_dec (.clk(clk), 
                        .rd(rd_addr_wb[4:0]), 
                        .rs(rs_addr_DUMMY[4:0]), 
                        .rt(rt_addr_DUMMY[4:0]), 
                        .wdata(wdata[31:0]), 
                        .we(regwriteback), 
                        .rdata1(opA_DUMMY[31:0]), 
                        .rdata2(opB_DUMMY[31:0]));
   signextend  signextend_dec (.a(XLXN_45[15:0]), 
                              .b(signimm_DUMMY[31:0]));
endmodule
